
PIR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000192  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000192  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000082  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000097e  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000009ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005f1  00000000  00000000  00000a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001c1  00000000  00000000  00001006  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000027b  00000000  00000000  000011c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001444  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001b8  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f2  00000000  00000000  000016dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000019ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e9       	ldi	r30, 0x92	; 146
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 38       	cpi	r26, 0x8A	; 138
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	76 d0       	rcall	.+236    	; 0x136 <main>
  4a:	a1 c0       	rjmp	.+322    	; 0x18e <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <_Z8disp_cmdj>:
		disp_data(48);
	}
	disp_cmd (0X04);
	while (num!=0)
	{
		a=num % 10;
  4e:	9c 01       	movw	r18, r24
  50:	20 7f       	andi	r18, 0xF0	; 240
		disp_data(a+48);
  52:	33 27       	eor	r19, r19
  54:	28 bb       	out	0x18, r18	; 24
		num=num/10;
  56:	98 b3       	in	r25, 0x18	; 24
	if (num==0)
	{
		disp_data(48);
	}
	disp_cmd (0X04);
	while (num!=0)
  58:	96 95       	lsr	r25
  5a:	96 95       	lsr	r25
	{
		a=num % 10;
		disp_data(a+48);
		num=num/10;
	}
	disp_cmd (0X06);
  5c:	9e 5f       	subi	r25, 0xFE	; 254
  5e:	98 bb       	out	0x18, r25	; 24
  60:	e3 ef       	ldi	r30, 0xF3	; 243
  62:	f1 e0       	ldi	r31, 0x01	; 1
	int a=0;
	if (num==0)
	{
		disp_data(48);
	}
	disp_cmd (0X04);
  64:	31 97       	sbiw	r30, 0x01	; 1
  66:	f1 f7       	brne	.-4      	; 0x64 <_Z8disp_cmdj+0x16>
  68:	00 c0       	rjmp	.+0      	; 0x6a <_Z8disp_cmdj+0x1c>
  6a:	00 00       	nop
		a=num % 10;
		disp_data(a+48);
		num=num/10;
	}
	disp_cmd (0X06);
}
  6c:	98 b3       	in	r25, 0x18	; 24
  6e:	92 50       	subi	r25, 0x02	; 2
  70:	98 bb       	out	0x18, r25	; 24
  72:	82 95       	swap	r24
  74:	80 7f       	andi	r24, 0xF0	; 240
{
	PORTB=((cmd)& 0XF0);
	PORTB=(PORTB>>2) + 0X02;
	_delay_ms(2);
	PORTB=PORTB - 0X02;
	PORTB=((cmd<<4)& 0XF0);
  76:	88 bb       	out	0x18, r24	; 24
	PORTB=(PORTB>>2) + 0X02;
  78:	88 b3       	in	r24, 0x18	; 24
  7a:	86 95       	lsr	r24
  7c:	86 95       	lsr	r24
  7e:	8e 5f       	subi	r24, 0xFE	; 254
  80:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	83 ef       	ldi	r24, 0xF3	; 243
  84:	91 e0       	ldi	r25, 0x01	; 1
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <_Z8disp_cmdj+0x38>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <_Z8disp_cmdj+0x3e>
  8c:	00 00       	nop
	_delay_ms(2);
	PORTB=PORTB - 0X02;
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	82 50       	subi	r24, 0x02	; 2
  92:	88 bb       	out	0x18, r24	; 24
  94:	08 95       	ret

00000096 <_Z8lcd_initv>:



void lcd_init()
{
	disp_cmd(0X02);
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	d9 df       	rcall	.-78     	; 0x4e <_Z8disp_cmdj>
	disp_cmd(0X28);
  9c:	88 e2       	ldi	r24, 0x28	; 40
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	d6 df       	rcall	.-84     	; 0x4e <_Z8disp_cmdj>
	disp_cmd(0X0C);
  a2:	8c e0       	ldi	r24, 0x0C	; 12
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	d3 df       	rcall	.-90     	; 0x4e <_Z8disp_cmdj>
	disp_cmd(0X06);
  a8:	86 e0       	ldi	r24, 0x06	; 6
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	d0 df       	rcall	.-96     	; 0x4e <_Z8disp_cmdj>
  ae:	08 95       	ret

000000b0 <_Z9disp_datai>:
	
	
}
void disp_data( int cmd)
{
	PORTB=(cmd  & 0XF0);
  b0:	9c 01       	movw	r18, r24
  b2:	20 7f       	andi	r18, 0xF0	; 240
  b4:	33 27       	eor	r19, r19
  b6:	28 bb       	out	0x18, r18	; 24
	PORTB=(PORTB>>2)+ 0X03;
  b8:	28 b3       	in	r18, 0x18	; 24
  ba:	26 95       	lsr	r18
  bc:	26 95       	lsr	r18
  be:	2d 5f       	subi	r18, 0xFD	; 253
  c0:	28 bb       	out	0x18, r18	; 24
  c2:	e3 ef       	ldi	r30, 0xF3	; 243
  c4:	f1 e0       	ldi	r31, 0x01	; 1
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <_Z9disp_datai+0x16>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <_Z9disp_datai+0x1c>
  cc:	00 00       	nop
	_delay_ms(2);
	PORTB=PORTB - 0X03;
  ce:	28 b3       	in	r18, 0x18	; 24
  d0:	23 50       	subi	r18, 0x03	; 3
  d2:	28 bb       	out	0x18, r18	; 24
	PORTB=((cmd<<4)& 0XF0);
  d4:	82 95       	swap	r24
  d6:	92 95       	swap	r25
  d8:	90 7f       	andi	r25, 0xF0	; 240
  da:	98 27       	eor	r25, r24
  dc:	80 7f       	andi	r24, 0xF0	; 240
  de:	98 27       	eor	r25, r24
  e0:	88 bb       	out	0x18, r24	; 24
	PORTB=(PORTB>>2)+ 0X03;
  e2:	88 b3       	in	r24, 0x18	; 24
  e4:	86 95       	lsr	r24
  e6:	86 95       	lsr	r24
  e8:	8d 5f       	subi	r24, 0xFD	; 253
  ea:	88 bb       	out	0x18, r24	; 24
  ec:	83 ef       	ldi	r24, 0xF3	; 243
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <_Z9disp_datai+0x40>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <_Z9disp_datai+0x46>
  f6:	00 00       	nop
	_delay_ms(2);
	PORTB=PORTB - 0X03;
  f8:	88 b3       	in	r24, 0x18	; 24
  fa:	83 50       	subi	r24, 0x03	; 3
  fc:	88 bb       	out	0x18, r24	; 24
  fe:	08 95       	ret

00000100 <_Z11disp_stringPc>:
}
void disp_string( char *str)
{
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	ec 01       	movw	r28, r24
	int i=0;
	while (str[i]!='\0')
 106:	88 81       	ld	r24, Y
 108:	88 23       	and	r24, r24
 10a:	31 f0       	breq	.+12     	; 0x118 <_Z11disp_stringPc+0x18>
	PORTB=((cmd<<4)& 0XF0);
	PORTB=(PORTB>>2)+ 0X03;
	_delay_ms(2);
	PORTB=PORTB - 0X03;
}
void disp_string( char *str)
 10c:	21 96       	adiw	r28, 0x01	; 1
{
	int i=0;
	while (str[i]!='\0')
	{
		disp_data (str[i]);
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	cf df       	rcall	.-98     	; 0xb0 <_Z9disp_datai>
	PORTB=PORTB - 0X03;
}
void disp_string( char *str)
{
	int i=0;
	while (str[i]!='\0')
 112:	89 91       	ld	r24, Y+
 114:	81 11       	cpse	r24, r1
 116:	fb cf       	rjmp	.-10     	; 0x10e <_Z11disp_stringPc+0xe>
	{
		disp_data (str[i]);
		i++;
		
	}
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <_Z10usart_initv>:



void usart_init()
{
	UCSRB =(1<<RXEN) | (1<<TXEN);
 11e:	88 e1       	ldi	r24, 0x18	; 24
 120:	8a b9       	out	0x0a, r24	; 10
	UCSRC =(1<<URSEL) | (1<<USBS) | (1<<UCSZ1) | (1<<UCSZ0);
 122:	8e e8       	ldi	r24, 0x8E	; 142
 124:	80 bd       	out	0x20, r24	; 32
	UBRRL=PS;
 126:	85 e0       	ldi	r24, 0x05	; 5
 128:	89 b9       	out	0x09, r24	; 9
	UBRRH=(PS>>8);
 12a:	10 bc       	out	0x20, r1	; 32
 12c:	08 95       	ret

0000012e <_Z8usart_txh>:
}

void usart_tx(unsigned char data)
{
	while((UCSRA & 0x20)==0);
 12e:	5d 9b       	sbis	0x0b, 5	; 11
 130:	fe cf       	rjmp	.-4      	; 0x12e <_Z8usart_txh>
	UDR=data;
 132:	8c b9       	out	0x0c, r24	; 12
 134:	08 95       	ret

00000136 <main>:
 

        int main()
        {
			
	        DDRB = 0XFF;
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	87 bb       	out	0x17, r24	; 23
	        DDRD = 0XFF;
 13a:	81 bb       	out	0x11, r24	; 17
			DDRC = 0XFE;
 13c:	8e ef       	ldi	r24, 0xFE	; 254
 13e:	84 bb       	out	0x14, r24	; 20
			lcd_init();
 140:	aa df       	rcall	.-172    	; 0x96 <_Z8lcd_initv>
			usart_init();
 142:	ed df       	rcall	.-38     	; 0x11e <_Z10usart_initv>
	        disp_cmd(0X80);
 144:	80 e8       	ldi	r24, 0x80	; 128
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	82 df       	rcall	.-252    	; 0x4e <_Z8disp_cmdj>
	        disp_string("WELCOME");
 14a:	80 e6       	ldi	r24, 0x60	; 96
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	d8 df       	rcall	.-80     	; 0x100 <_Z11disp_stringPc>
	      
	       
		    while(1)
			{
				
			if (PINC==0X01)
 150:	83 b3       	in	r24, 0x13	; 19
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	a9 f4       	brne	.+42     	; 0x180 <main+0x4a>
			{
				//PORTB=0XFF;
				disp_cmd(0XC0);
 156:	80 ec       	ldi	r24, 0xC0	; 192
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	79 df       	rcall	.-270    	; 0x4e <_Z8disp_cmdj>
				disp_string("DETECTED        ");
 15c:	88 e6       	ldi	r24, 0x68	; 104
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	cf df       	rcall	.-98     	; 0x100 <_Z11disp_stringPc>
				usart_tx('A');
 162:	81 e4       	ldi	r24, 0x41	; 65
 164:	e4 df       	rcall	.-56     	; 0x12e <_Z8usart_txh>
 166:	87 ea       	ldi	r24, 0xA7	; 167
 168:	91 e6       	ldi	r25, 0x61	; 97
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <main+0x34>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x3a>
 170:	00 00       	nop
 172:	87 ea       	ldi	r24, 0xA7	; 167
 174:	91 e6       	ldi	r25, 0x61	; 97
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <main+0x40>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x46>
 17c:	00 00       	nop
 17e:	e8 cf       	rjmp	.-48     	; 0x150 <main+0x1a>
				//_delay_ms(1000);
			}
			
			else
			{
				disp_cmd(0XC0);
 180:	80 ec       	ldi	r24, 0xC0	; 192
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	64 df       	rcall	.-312    	; 0x4e <_Z8disp_cmdj>
				disp_string("NOT DETECTED    ");
 186:	89 e7       	ldi	r24, 0x79	; 121
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	ba df       	rcall	.-140    	; 0x100 <_Z11disp_stringPc>
 18c:	e1 cf       	rjmp	.-62     	; 0x150 <main+0x1a>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
